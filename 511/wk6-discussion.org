# BECAUSE AN ASSIGNMENT IS DUE SUNDAY, REBUTTALS TO MAIN POSTS ARE OPTIONAL THIS WEEK.

# The SPM recognized that developing a visual schedule with inputs from most everyone on the team
# would achieve a high level of buy-in from everyone involved and thereby “jell” the team and keep
# everyone focused on project goals. A shared schedule would help everyone understand coordination
# signals, project hand-offs, and pressure points which in turn would motivate team members to help
# each other and achieve project success together.

# Upon completion of the WBS, the tasks and activities were estimated, a schedule developed and the
# staffing levels were updated. The general approach they took was as follows:

# a) Reviewed, validated and modified the WBS to ensure that all tasks, in particular, the healthcare
# and personal device elements, were duly allocated in the WBS

# b) Estimated all WBS elements (tasks) (size and effort as appropriate) and clearly identified all
# critical dependencies

# c) Developed a feasible schedule of tasks and a rationalized (“smooth”) staffing profile.

# With inputs from the requirements and development teams, they developed estimates of the total
# software size from the preliminary requirements gathered to date and the partially completed
# software design. Using the COCOMO model with the size estimates as input, a new schedule was
# produced by the end of the month in the form of a Gantt chart representing the main tasks
# distributed over the remaining time to complete the project. They were able to find a way to
# allocate tasks and resources to meet the original (next year’s) July 1st delivery date.

# This detailed planning and scheduling spread the original staffing profile out into later months
# allowing a larger peak staffing level later (by end of August) than earlier contemplated. The
# project would be staffed up to the maximum profile of 30 full-time JDI employees, including
# contracted consultants and specialists, plus the customer’s 4 programmers, for a total project
# staffing of 34. The software development team would be led by the SDM lead and deputy SDM.

# See Case Study Learning Module: GanttChart(April 30) and OrgChart(Aug 31st)

# Discussion 6: Dependencies, Estimating, Scheduling, and Staffing, April

# This week you are tasked to review the schedule (see below) and look for opportunities to improve
# it. Discuss possibilities with your classmates and support your opinions with valid rationale.



* Missing/Vague Items
# a. Can you identify any tasks and dependencies that you think are missing or vague?

  Without seeing the ADV, it's not very clear how the tasks map to parts of the finished system.
  For example, the "Foundation SW" task; I have no idea what goes into that, so it's not clear what
  depends on it.

  There may be a dependency between the UI prototyping tasks and the COTS calendaring components.
  If we don't do this carefully, it will feel to the user like two systems, rather than just one.

  None of the tasks have a finish-to-start dependency on complete requirements.  For some
  components, this may be okay (UI, for instance), but for others it might mean a lot of rework.

  
* Scheduling
# b. Are there any development tasks (e.g. requirements, design, construction, testing, etc.) that
# could be conducted concurrently, started early, or delayed to smooth staffing levels on this
# project?

  The UI prototyping activities are easy to split off, and should be as soon as possible to provide
  good requirements.  Selection of COTS components, such as the calendaring module, can also be done
  in parallel, though some performance profiling might be in order first to ensure that the system
  will function for the specified 5-10 years.

  Selection and acquisition of the calendaring module is another task that has few dependencies,
  though it's important that the look and feel of the rest of the system match well with the
  calendar and appointment UI.
  


* Critical Path
# c. Although few task dependencies are actually shown, are there any tasks that you think may be on
# the critical path?

  Without explicit annotations it's hard to say, but it looks like the critical path will run
  through all of these tasks:

  - Dev. Applic Serv Functions
  - System Integration & Test
  - Install & Checkout Site HW
  - Install & Deploy SW at Sites


* Management Tools
# d. What tools would you consider using to support WBS capture, estimating, and scheduling?

  Following Fairley's WBS guidelines is a good place to start with WBS.  If a traceability tool like
  DOORS is available, I'd try to plug into that; otherwise, Word documents will probably suffice.

  Given that JDI has never done this type of project before, we can't use a historical model for
  estimation.  I'd probably use COCOMO as the primary estimation technique, though I'd use
  work-package estimates done in-house as a way to double-check.

  For scheduling, I'd be tempted to start with a tool that does auto-leveling, such as Project.  The
  schedule produced by this method is only as good as the information provided to it, so
  significatnt attention would have to be paid to inter-task dependencies.

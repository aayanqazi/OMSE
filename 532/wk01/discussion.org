Week 1 discussion

#+OPTIONS: num:nil toc:nil author:nil timestamp:nil creator:nil

The architectural business cycle (ABC) exists whether an organization pays any
attention to it or not. That is, the architectures of a system tend to
influence the things that influence it. The only issue is whether we are
attempting to control those influences to achieve particular goals, or simply
allowing them to happen.

For this question, please think of an example illustrating the ABC from your
work experiences.  Try to think of a case where certain architectural design
decisions had downstream effects (e.g., the design made it difficult to add a
feature later) or previous decisions affected the form of the architecture
(e.g., the form of the organization determined the form of the architecture).

You may give an example where these influences resulted in unintended
consequences or where good control resulted in the desired effect.

* My post
  The last code base I worked with had a couple of very interesting design
  choices baked in at a very low level.  This was conceived in the early days
  of C++, when inheritance was the primary method used for sharing code
  between two modules.

  The biggest was the [[http://en.wikipedia.org/wiki/Diamond_problem][diamond architecture]].  The base class for most working
  code inherited from two other classes, both of which inherited from a fourth
  class.  This bit of architecture ended up limiting future development; you
  can only inherit from one "B" class, but we needed the "D" class to
  reference more than one "B" type of object.  It took something like a
  staff-month to work around that limitation.

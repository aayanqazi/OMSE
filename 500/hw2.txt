1.  Does an excellent process lead to excellent products? 

Not necessarily. Neither is required for the other. An excellent process merely
makes it statistically more likely that excellent software will be produced by
any given team.

1a. When might it?

A process has a chance at working when (a) the entire software organization is
committed to the process, and (b) the right process is chosen for the project.

1b. When might it not?

If either (a) or (b) above are not true, the chances of producing an excellent
piece of software are greatly reduced. 

2. What member of Brooks' surgical team do you think you couldn't live without?
Why?

Several members of Brooks' team could be eliminated entirely with modern tools.
The program clerk, for instance, has been supplanted by source control, logging,
and build automation software. Among the others, however, choosing one is like
picking the most important tire on a car. The surgeon is the most visible member
of the team, but I think the copilot might be the most important member; often
it is the second set of eyes on the code that makes it excellent. The very act
of formulating a question for a colleague oftentimes clarifies a murky problem.
I believe it is the copilot that most ensures the success of the surgical team.

3. Do you really think that this surgical small-team model would scale up to a
huge project? Why or why not?

Using the surgical team strategy, Brooks estimates that rather than managing
1000 minds, the problem is to manage 20. However, this is still assuming that
the project is partionable into perfectly independent chunks, which is a
pleasant fiction at best. The communication and interaction issues between the
teams is made much more complex by having 10 minds on a team; there are many
opportunities for emergent behavior here. In the end, I do believe such a model
could scale, though the productivity gain may not be as optimistic as postulated
in the book.

4. Giving reasons for your answer based on the type of system being developed,
suggest the most appropriate generic software process model that might be used
as a basis for managing the development of the following systems:

4a. A system to control anti-lock braking in a car.

This is a primary safety-critical system, which has static requirements, and
which is tied to a hardware delivery date, so a waterfall process is most
appropriate.

4b. A virtual reality system to support software maintenance.

This project seems suited to an evolutionary process; such a cutting-edge
project is likely to have emergent requirements, and the product is not a
critical system.

4c. A university accounting system that replaces an existing system.

This is a mission-critical project (the university cannot function without
money) and the requirements are static (replace the existing system), so a waterfall model is appropriate.

4d. An interactive system that allows railway passengers to find train times
from terminals installed in stations.

This project seems to lend itself to evolutionary development as well, since the
system is not critical (paper charts can be posted alongside the kiosks in case
of downtime), and it is likely that new use cases will arise during the
development cycle.

5. Explain why programs that are developed using evolutionary development are
likely to be difficult to maintain.

First, the code becomes messier the older it is. Code written in iteration N may
need changes to adapt to a changing requirement in iteration N+1. The "right
way" to make these changes may require major refactoring, and the iterative
process doesn't lend itself to long tasks, so the developers are encouraged by
the process to resort to hacks.

Second, since the requirements change constantly, the code may be untraceable.
The maintainer may see a piece of code and understand what it does, but the
reasons for this behavior may be difficult or impossible to track down amongst
the stack of index cards left over from the development process.

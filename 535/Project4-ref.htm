<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta name="Microsoft Theme 2.00" content="boldstri 000">
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="OMSE%20535%20Project%204_files/filelist.xml">
<title>OMSE 535 Project 4</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Manny Gatlin</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>HP Authorized Customer</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:Created>2003-12-21T23:13:00Z</o:Created>
  <o:LastSaved>2007-09-16T20:19:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>526</o:Words>
  <o:Characters>2999</o:Characters>
  <o:Lines>24</o:Lines>
  <o:Paragraphs>7</o:Paragraphs>
  <o:CharactersWithSpaces>3518</o:CharactersWithSpaces>
  <o:Version>11.6568</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:GrammarState>Clean</w:GrammarState>
  <w:DrawingGridHorizontalSpacing>2.85 pt</w:DrawingGridHorizontalSpacing>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:black;
	mso-font-kerning:16.0pt;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:black;
	font-weight:normal;
	mso-bidi-font-weight:bold;
	mso-bidi-font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:14.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:black;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:black;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
h5
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:black;
	font-weight:normal;
	mso-bidi-font-weight:bold;
	mso-bidi-font-style:italic;}
h6
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:8.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:black;
	font-weight:normal;
	mso-bidi-font-weight:bold;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	mso-pagination:widow-orphan;
	mso-list:l0 level1 lfo2;
	tab-stops:list .5in;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
p.MsoList2, li.MsoList2, div.MsoList2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
p.MsoList3, li.MsoList3, div.MsoList3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.75in;
	margin-bottom:.0001pt;
	text-indent:-.25in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Arial;
	color:black;}
a:link, span.MsoHyperlink
	{color:#990000;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:#336699;
	text-decoration:underline;
	text-underline:single;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-title-page:yes;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1678387606;
	mso-list-type:hybrid;
	mso-list-template-ids:-437511614 -1718338034 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-style-link:"TOC 1";
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="4098"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body bgcolor=white lang=EN-US link="#990000" vlink="#336699" style='tab-interval:
.5in'>

<div class=Section1>

<h1>Part IV – Unit Testing Plan and Test Cases</h1>

<h1><span style='font-size:16.0pt;mso-bidi-font-size:24.0pt'>Objective:<o:p></o:p></span></h1>

<h1><span style='font-size:12.0pt;mso-bidi-font-size:24.0pt'>To understand the
preparation and activities required to unit test a module to ensure that it
works properly and performs required functions. <o:p></o:p></span></h1>

<h1><span style='font-size:16.0pt;mso-bidi-font-size:24.0pt'>Description:<o:p></o:p></span></h1>

<p class=MsoBodyText>Unit Test planning is necessary to ensure adequate testing
of a module. Ad hoc testing will likely not uncover some errors, since it does
not guarantee adequate coverage with sufficient test cases.</p>

<p class=MsoBodyText>The last part of the project involves creating a unit test
plan, using the code found in appendix A.<span style='mso-spacerun:yes'> 
</span>A Unit Test Plan is a document describing the unit test process in terms
of the features to be tested, pass/fail criteria and testing approach, resource
requirements and schedules. The test plan should include the specific test
cases that should be executed, and should specify white box and black box
tests. </p>

<p class=MsoBodyText>A<i> Black Box</i> test is a test with a list of desired
inputs and a corresponding list of expected outputs. The Hetzel text should be
very useful in helping you develop these kinds of tests. <i>White Box</i>
testing attempts to test as many branches/loop paths in the code as possible,
and that every line of code and every possible conditional statement are
executed at least once. This is not exhaustive testing, since it tests paths
rather than every possible permutation of values through those paths.</p>

<h1><span style='font-size:16.0pt;mso-bidi-font-size:24.0pt'>Output:</span></h1>

<p class=MsoToc1><![if !supportLists]><span style='mso-fareast-font-family:
"Trebuchet MS";mso-bidi-font-family:"Trebuchet MS"'><span style='mso-list:Ignore'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>A
Unit Test Plan that specifies the actual unit test cases to be performed on the
code. Be sure to include the features to be tested, pass/fail criteria, the
testing approach, resource requirements, and the testing schedule. </p>

<p class=MsoToc1><![if !supportLists]><span style='mso-fareast-font-family:
"Trebuchet MS";mso-bidi-font-family:"Trebuchet MS"'><span style='mso-list:Ignore'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Test
coverage measurement must be included as part of this assignment. Demonstrate
statement coverage and basis path coverage at a minimum through test case
coverage analysis. </p>

<p class=MsoToc1><![if !supportLists]><span style='mso-fareast-font-family:
"Trebuchet MS";mso-bidi-font-family:"Trebuchet MS"'><span style='mso-list:Ignore'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Produce
a test report log, indicating the expected results of your testing based on
your test cases.</p>

<p class=MsoNormal style='mso-pagination:none'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='mso-pagination:none'>NOTE: Appendix A is provided as
a sample for the student. If you wish to substitute the code in Appendix A to complete
projects 3 and 4, please submit the code you propose to use to the instructor
and obtain approval <b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'><u>before</u></i></b> starting on these projects.</p>

<span style='font-size:24.0pt;mso-bidi-font-size:12.0pt;font-family:"Trebuchet MS";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:
AR-SA'><br clear=all style='page-break-before:always'>
</span>

<p class=MsoNormal style='mso-pagination:none'><span style='font-size:24.0pt;
mso-bidi-font-size:12.0pt'>Appendix A – Project Source Code</span></p>

<pre><o:p>&nbsp;</o:p></pre><pre>--------------------------------Stack.h-------------</pre><pre>/*</pre><pre> * Stack Abstract Data Type.</pre><pre> */</pre><pre><o:p>&nbsp;</o:p></pre><pre>/* Push function */</pre><pre><span
class=GramE>void</span> push(int stackinput);</pre><pre><o:p>&nbsp;</o:p></pre><pre>/* Pop function */</pre><pre><span
class=GramE>int</span> pop(void);</pre><pre><o:p>&nbsp;</o:p></pre><pre>/* Stack empty function */</pre><pre><span
class=GramE>int</span> isempty(void);</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre>--------------------------------Stack.c-------------</pre><pre>/*</pre><pre> * Stack - Abstract Data Type implementation</pre><pre> */</pre><pre><o:p>&nbsp;</o:p></pre><pre>#include &quot;stack.h&quot;</pre><pre>#include &lt;stdlib.h&gt;</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
class=GramE>struct</span> stackelement {</pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>int</span> stackdata;<span style='mso-spacerun:yes'>               </span></pre><pre><span style='mso-spacerun:yes'> </span><span style='mso-spacerun:yes'>       </span><span
class=GramE>struct</span> stackelement *next;<span style='mso-spacerun:yes'>     </span></pre><pre>};</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
class=GramE>static</span> struct stackelement *stacktop = NULL;</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
class=GramE>void</span> push(int stackinput)</pre><pre>{</pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>struct</span> stackelement *newnode = malloc(sizeof (struct stackelement));</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>newnode</span>-&gt;stackdata = stackinput;</pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>newnode</span>-&gt;next= stacktop;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>stacktop</span> = newnode;</pre><pre>}</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
class=GramE>int</span> pop(void)</pre><pre>{</pre><pre><span style='mso-spacerun:yes'>        </span></pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>int</span> returnvalue = stacktop-&gt;stackdata;</pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>struct</span> stackelement *oldstacktop = stacktop;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>stacktop</span> = stacktop-&gt;next;</pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>free(</span>oldstacktop);</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>return</span> (returnvalue);</pre><pre>}</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
class=GramE>int</span> isempty(void)</pre><pre>{</pre><pre><span style='mso-spacerun:yes'>        </span><span
class=GramE>return</span> stacktop == NULL;</pre><pre>}</pre><pre><o:p>&nbsp;</o:p></pre><pre>--------------------------------StackTestDriver.c-------------</pre><pre><o:p>&nbsp;</o:p></pre><pre>/*</pre><pre> * Test Driver program for the stack code.</pre><pre> */</pre><pre><o:p>&nbsp;</o:p></pre><pre>#include &quot;stack.h&quot;</pre><pre>#include &lt;stdio.h&gt;</pre><pre><o:p>&nbsp;</o:p></pre><pre><o:p>&nbsp;</o:p></pre><pre><span
class=GramE>void</span> main()</pre><pre>{</pre><pre><span style='mso-tab-count:
1'>        </span><span class=GramE>int</span> num;</pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='mso-tab-count:1'>        </span><span class=GramE>printf(</span>&quot;Please input numbers to load into the stack.\nPress any non-integer key when done.\n&quot;);</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>    </span><span
class=GramE>while(</span>scanf(&quot;%d&quot;, &amp;num) == 1)</pre><pre><span
style='mso-tab-count:2'>               </span><span class=GramE>push(</span>num);</pre><pre><o:p>&nbsp;</o:p></pre><pre><span style='mso-spacerun:yes'>    </span><span
class=GramE>while(</span>!isempty())</pre><pre><span style='mso-tab-count:1'>        </span><span style='mso-spacerun:yes'>    </span><span
class=GramE>printf(</span>&quot;%d\n&quot;, pop());</pre><pre><o:p>&nbsp;</o:p></pre><pre><span
style='mso-tab-count:1'>        </span><span class=GramE>return</span>;</pre><pre>}</pre><pre><o:p>&nbsp;</o:p></pre><pre> </pre><pre><span style='mso-spacerun:yes'> </span></pre><pre><span style='mso-spacerun:yes'> </span></pre><pre><span style='mso-spacerun:yes'> </span></pre><pre><o:p>&nbsp;</o:p></pre>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

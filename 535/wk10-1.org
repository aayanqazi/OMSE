#+OPTIONS: num:nil toc:nil author:nil timestamp:nil creator:nil

Future of Testing

* Post                                                             :noexport:
  /The future of software testing: What do you think will transform the state of software testing in the future?  Will it be some fundamental technique from the past?  Will remarketing the methods of fundamental software testing into agile “Extreme Testing” methodologies revolutionalize the testing process?  Why or why not?/

  I think the future of testing lies with intelligent automation.  Projects like [[http://research.microsoft.com/en-us/projects/Pex/][Pex]] can generate
  high-coverage test suites for existing code, with many cases a human wouldn't have thought to
  include.  Libraries like [[http://msdn.microsoft.com/en-us/devlabs/dd491992.aspx][Code Contracts]] can do static or runtime checking of interface contracts
  (which are written by humans, but could be extracted from a specification).  Type-checkers and
  thoerem provers can inspect a Z document and look for inconsistencies or a limited set of errors.

  Humans will always be involved in one way or another, at least until we are replaced as the
  dominant life form by machines more intelligent than ourselves, but I can see a market for
  automated assistance in performing human tasks (CAST tools? Intellitest?).

  In one sense, all of software engineering is the repackaging of old ideas; most of the profound
  discoveries we are still relearning today were made 40 years ago.  On the other hand, combining
  them into a form that is easy to digest at different levels of the organization is valuable, so I
  still expect to see people selling the old ideas with new box art.

  The new "extreme" methodologies won't revolutionize testing per se, but as development moves
  towards more iterative models, testing will follow.


* Me / Jesse                                                       :noexport:
  /humans will likely still need to be involved./

  Algorithms will always have limitations.  The key thing is that we're using computers to amplify
  our own abilities, and to make our software better.


* Me / Nick                                                        :noexport:
  /I think ease of automation will also be important./

  The best automation is the kind that helps you without being asked.  Think of Intellisense; the
  computer is trying to finish your sentences.  It doesn't need to be asked, you don't need to do
  elaborate setup and manually run a script, it just does it.  It's a little like having a
  cybernetic eye.

  That's the real key, and the dream of cyberpunk novelists for thirty years: machine augmentation
  of human abilities.  We're starging to see it with writing code, in the form of Intellisense and
  autogenerated WSDL and O/RM wrappers.  Testing is becoming more about writing code, so I think a
  lot of the advances we've made for programming will happen next in testing.


* Joel / Sharad                                                    :noexport:
  /In my experience, I’ve seen that about 10 – 12 years back, developers were more disciplined about
  unit testing and most of the time ensured that their programs do not have any known bugs./

  I'm always suspicious when I read a statement like this.  My dad used to pull this on me: "when I
  was a kid, we walked to school, and here you are complaining about your car ride!"

  I think this is selection bias, and we all do it.  Humans tend to only remember the best and worst
  events of the past, and most generally-pleasant people tend to forget more bad than good.  Thus,
  the further back you go, the rosier the past looks in comparison to the present.

  I've worked with some great engineers, who try very hard to check in only good code.  I don't have
  any data to support the claim that they've gotten worse in the 6 years I've been in this industry,
  and I don't expect to have any after another 10.

* Mike / Matt / Mike / Michael                                     :noexport:
  /Can you imagine Apple using this method for the next iPhone?/

  They could collect telemetry on the current-generation iPhone to inform the design of the next
  one.  This is even more effective on an iPhone than with Windows; an iPhone is almost always
  connected to a network, whereas there are probably millions of PCs that /never/ get connected to
  the Internet.


* Mike / Marty / Joseph
  /I doubt that it will work with applications that deal with more sensitive information like
  banking or investment-related web applications./

  Why not?  I think we can all agree that the /security/ of such a system shouldn't be subject to
  A/B testing, but the UI?  That's orthogonal to security, and you could do end-user testing of all
  your options without sacrificing privacy or security.  The data collected would have to be
  scrubbed for personal or privileged information, but that wouldn't be too hard either.

  UI is so incredibly important, but so easy to screw up if you don't involve actual users.  The
  banking system my company uses for employee expenses is utter crap by UI standards.  If they were
  to ask if I wanted to participate in a UI redesign test, I would jump at it; that's the sort of
  behavior I like to reward.

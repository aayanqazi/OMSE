Programming languages

#+OPTIONS: num:nil toc:nil author:nil timestamp:nil creator:nil

* Original post                                                    :noexport:
  /Does the choice of a programming language affect development?  Why or why not?/

  Yes it does matter.  In the COCOMO models, the implementation language has a direct effect on the
  code size, total effort, and calendar time needed to produce a given system.

  The choice of language has other effects as well.  Some languages are more suited to certain tasks
  than others; hardly anyone who knows Perl would choose C++ to write a program involving regular
  expressions.  An object-oriented system is certainly possible in Perl 5, but the impedance is much
  higher than with Python.  If your system is required to be provably correct, it's probably better
  to choose a language that has provability as one of its primary goals, since C++ is nearly
  unparseable.

  There are non-technical reasons to choose one language over another, as well.  The availability of
  experienced programmers is a good example.  Marketability is another; nobody wants to work in
  MUMPS.  Team morale is yet another; writing a web application in x86 assembler is painful.

  /Can you write good code in any language?/
  
  Sure, but the quality of the code is meaningless next to what it can do.  When writing in
  assembly, all the programmer's brainpower is spent in keeping track of what variable is in what
  register, and how to deal with hyperthreading and out-of-order execution.  This makes it much more
  time- and labor-intensive to achieve higher-order objectives, such as a smooth user experience.
  On the other end of the spectrum, frameworks such as Django and Rails handle the gruntwork of
  writing a certain class of applications; about half of what's left is designing the user
  experience.

  It's the difference between a crowbar and a forklift.  No matter how finely crafted the crowbar,
  you'll never lift two tons of shingles to the roof of a 10-story building.

* Reply to Nick                                                    :noexport:
  /For example, McConnell argues, "The words available in a programming language for expressing
  your programming thoughts certainly determine how you express your thoughts and might even
  determine what thoughts you can express./"

  This is called the [[http://www.programmersparadox.com/2009/02/27/sapir-whorf-hypothesis/][Sapir-Whorf Hypothesis]], and it was originally posited about human languages;
  that the ideas you can think are limited by what's expressible in your language.  If it's correct
  (and it certainly has the ring of truth), this is a good argument for learning new computer
  languages -- after a while, you'll start having ideas that you not only didn't have before, but
  that you /couldn't/ have had before.

  We're getting a little off-topic, but this definitely suggests that knowing some programming
  languages makes you better in others.  Does that mean that the choice of programming language
  matters for a given system?
* Kevin / Mike / Me                                                :noexport:
  /If it takes months to become proficient in a new language and you could have written the app in that time in the language you know, then you have to weigh that fact against the possible future benefits of knowing the new language./

  Languages don't tend to come in a vacuum anymore.  What we're really weighing is whether choosing
  a new language /and its libraries/ will give more long-term benefit than using the current
  language.  If the cost is two months of ramp-up, but the benefit is that you don't have to write
  your own HTTP client, I'd say that's a net win for any project longer than 3 months.

  Also, it's pretty rare to be moving down on the language power scale; how many times will you
  stop developing in Python in favor of Fortran?  Given that most of these choices are between the
  current (low-power) language and the new (high-power) language, the ramp-up cost is amortized over
  years of having higher productivity.

* Kooth / Joseph                                                   :noexport:
  /If these are the "pure" basis of language selection, what do you think is the impact in one of my projects with 85 developers that are well-experienced in Java (note: the count does not include analysts, testers and QA) if we have chosen to use .Net, which like Java is also well-suited for the given type of project and within the list of standard frameworks that we can possibly use?/

  Migrating from Java to .NET is like trading a Ford pickup for a Chevy.  [[Http://www.qsm.com/%3Fq%3Dresources/function-point-languages-table/index.html][Industry data]] indicates
  both languages have similar productivity.  The standard libraries are of similar capability.  The
  third-party tools and components ecosystems are both excellent.  They have similar performance.
  They both require an external runtime to be installed.  

  There would have to be a significant organizational or environmental reason for moving from one to
  the other, and it would have to be compelling enough to warrant the cost, which like you said is
  significant.

* Kooth / Matt / Kooth / Joseph / Kooth / Me                       :noexport:
  I think the point was that, regardless of how urgent the project is or how loose or tight the
  schedule, it's still better to choose technologies that will make it cost less.  In the example
  you cited, the "loose" projects were still implemented in less-efficient environments.

  I can think of a few good reasons to make this choice.  One is risk; if your developers know TACL,
  they're less likely to design against the grain of the language, and will probably introduce fewer
  bugs -- the project may take more time initially, but be fairly stable and predictable.  Contrast
  with a tightly-constrained project, where it makes sense to take some risks to achieve the
  schedule -- less experience may mean more bugs and more uncertainty, but the project at least has
  a chance of meeting the delivery date.

  In hindsight, it's easy to say "we should have been doing this all along!"  Of /course/ we should
  choose the toolset that lets us complete the system with the least effort.  But it's not always
  clear which choice to make.


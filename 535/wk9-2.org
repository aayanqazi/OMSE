#+OPTIONS: num:nil toc:nil author:nil timestamp:nil creator:nil

Project IV

* Post                                                             :noexport:
  /What value does unit testing have?/

  Unit testing provides two important values: better design and regression safety.

  Unit testing, when performed before writing code, can be a powerful technique in making the class
  or module testable and easy to use.  When you write the tests first, you tend to decrease coupling
  (by mocking out dependencies), and increase cohesion (by thinking about the module's job before
  writing it).

  The other primary value a unit test suite has is for regression testing.  Refactoring code can be
  scary without unit tests, since any change might break something in some unexpected place, and you
  won't know about it until the test group finds the defect.  With unit tests, in many cases you
  know within seconds of making the change that it changed a behavior that some other component was
  depending on.

  /Should we perform unit testing? Why or why not? Why donâ€™t most organizations unit test their
  software?/

  The pragmatic view is that test code is just more code -- it takes time to write, and it takes
  time to maintain.  To a certain degree, this is true; test code does take time to write, but it
  can add significant value to the software.  Every organization must answer the cost/benefit
  question itself.

  /What important lessons did you learn from this part of the project?/

  As a developer, I tend to think in a very white-box way -- I know all the workings of the code, so
  I want to test the hidden capabilities and the corner cases.  The biggest revelation to me on this
  project was thinking in black-box terms, testing the code using only its public interface.  By
  forcing myself to ignore some of my knowledge, I got an entirely different perspective on the
  code.
* Me / Gabriel                                                     :noexport:
  Most everything I've read says that unit testing has value, and TDD and BDD are great techniques.
  It's still hard to convince my /coworkers/ that we should be spending effort on these things, let
  alone management.


  I wonder how much of it is curmudgeonliness, and how much is rooted in that deep skepticism you
  get from being in this industry for multiple decades.
* Jason / Mike / Jason                                             :noexport:
  /Yeah, I really think help with refactoring is the biggest benefit of unit tests, in terms of
  total cost/effort savings./

  I've had this argument with my boss, and he thinks refactoring is hooey.  "So now you've spent a
  bunch of time and effort in changing the code, and it doesn't do anything more than when you
  started!"  It's hard to make high-level points about TDD/BDD and the value of a regression suite
  when refactoring when the very practice of refactoring isn't seen as having any value.
* Jesse / Joe / Jesse
  /On the other hand, I'd still contend that even lower quality unit testing can positively affect
  code quality and improve the effectiveness of downstream testing efforts./

  It's easy to say that any testing is better than no testing.  But if your developers are wasting
  time writing no-op test cases, they're also giving themselves a false sense of security when it
  comes to their abilities and the quaility of their code.  The cost of poor testing can be quite
  high.

Great programmers

#+OPTIONS: num:nil toc:nil author:nil timestamp:nil creator:nil

* Original post                                                    :noexport:

** A great programmer
*** Thinks logically and mathematically
    it's imperative to be able to handle Boolean logic and program flow, as well as follow program
    flow.  This also includes the ability to take a human-language description of an algorithm and
    write some code that implements it.

*** Thinks abstractly
    Read "can understand pointers."  If you can't wrap your brain around a dereferenced pointer, or go
    one level meta in a design session, you'll never be great.

*** Has a irtual machine in her head
    This is the ability to mentally simulate program flow, almost like running a symbolic debugger.

*** Is curious
    A great programmer never stops learning, whether they are extending their breadth by learning a
    totally new technology or language, or simply extending their knowledge and experience with their
    native toolset.

*** Effectively communicates
    Having great ideas and ninja-like skills with Emacs does very little good if you can't work with
    other people.

** My manager thinks a great programmer
*** Gets the job done
    At the end of the day, all that matters is that the work got done, and the system can do what
    the business is asking of it.  The converse of this is building the system that's needed, rather
    than the Platonic ideal system that would solve the business problem as a side-effect.
*** Doesn't hurt the team
    There are several skills that prevent one's code from causing pain to other team members, or the
    original author several weeks or months later.  Writing readable code, writing useful comments,
    low-level design techniques and patterns all come into play here.
*** Is self-aware
    Being able to produce a decent work estimate is an invaluable skill when planning a software
    project.  When in the trenches, knowing where you stand with respect to where you should be is a
    powerful decision-making tool.
*** Is passionate
    People who care about what they do tend to be easier to manage.  They improve themselves, they
    enforce quality standards, and they take pride in what they do.

* Reply to Kevin Richardson                                        :noexport:
  /Writes tests for his code before he actually writes the code./

  I understand that TDD is the new hotness, but I'd argue that this is a point of methodology.  Is
  Linus Torvalds a good programmer?  He didn't write tests for the Linux kernel before he wrote it.
  Writing your tests first is a fine technique, but I don't think it's an intrinsic quality of a
  good programmer.

  /his/her code is extensible/

  Sometimes this isn't desirable.  I'd argue that, in most situations, there's no way to know what
  kinds of extensibility will be useful or necessary in the future, so commiting to one set of axes
  for extension is premature.  True, if your predictions are correct, it'll be nice to already have
  the new feature written, but what are the odds that you're exactly right?  It's usually better to
  do the simplest thing that could possibly work, rather than risk wasting the development time
  including the wrong kind of extensibility.
  


* Reply to Kooth's reply to Sharad                                 :noexport:
  /I would like to add that a good programmer would do a self review before even giving to peer
  review and he starts the unit testing only after the peer review is complete./

  In an ideal world, perhaps this would be true.  Pair-programming goes this route, where all code
  is "peer-reviewed" by at least one other person before it's checked in, but there's no "self
  review" stage there.  Also, TDD seems to be the best thing since sliced bread these days, so the
  unit testing should then happen before writing any code.

  I guess the point I'm trying to make is that no single methodology or process can define what a
  good programmer is.  A good programmer uses the team's methodology when it is a benefit, and
  circumvents or changes it when it is a detriment.


* Reply to mine: Jesse                                             :noexport:
  Sure, but the question wasn't "What makes a programmer you'd like to work with?" :)

  I used to think that skill didn't matter, that I could keep doing what I was doing and be happy
  with my career.  I read [[http://www.joelonsoftware.com/articles/HighNotes.html][something]] a while back that changed my mind.  It turns out that there is a
  difference between most programmers and the /best/ programmers, and I believe it is worth striving
  for.

  There's a network effect, too.  Great programmers tend to gather, because it's /awesome/ to work
  with great people.  Think about it: while it'd be nice for a while, wouldn't it eventually get
  boring always being the smartest guy in the room?  Not respecting the taste or skill of your
  teammates, and not trusting their judgement?  Wouldn't you want to have someone to look up to, to
  learn from, to compete with?

  I'm not even sure this is on-topic.  I realize most people aren't, but I'm really into getting
  better at programming and engineering.  To do that, you have to know the difference between the
  average and the truly great.

* Reply to mine: Martin
  /It's interesting that many people (including myself) referenced schedules, estimates, and job
  completion only under the "what my manager wants" section./

  Maybe it's because of the word 'programmer'.  To me, to be a good programmer is to be good at
  designing and writing code.  The "my manager" qualities we chose are really more about software
  engineering and predictability.

  I guess we all think that our managers don't really care how much of a superstar genius ninja you
  are with your text editor, they just care that the work gets done on time.
  

* Reply to mine: Matthew
  /you mentioned here that being able to think in the abstract would involve the understanding of
  pointers./

  Maybe I singled out pointers too much.  You're right, there are really two kinds of abstraction
  going on here.

  The first is technical, or what OS people call virtualization; you're given a thing, but it's not
  really a thing, it's just something that lets you find the real thing.  This happens with objects
  (pointers and references), buffers (virtual/physical memory addresses), and OS objects (handles).

  The second is design-time abstraction, or intellectual leverage.  The ability to re-use ideas, to
  think generically, to juxtapose two specific problems and see that they're really just two aspects
  of the same issue.  Knowing and using design patterns, processing code like it was data, that kind
  of thing.

  So yes, there are two kinds of abstraction.  I would further argue that a /good/ programmer needs
  both of them.  If you can't handle pointers, some of the most profound ideas in computer science
  will simply be over your head.  If you can't apply old ideas in new ways, the bulk of computer
  science is useless to you.
